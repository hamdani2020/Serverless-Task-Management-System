{"ast":null,"code":"// src/AuthContext.ts\nimport React from \"react\";\nvar AuthContext = React.createContext(void 0);\nAuthContext.displayName = \"AuthContext\";\n\n// src/AuthProvider.tsx\nimport React2 from \"react\";\nimport { UserManager } from \"oidc-client-ts\";\n\n// src/AuthState.ts\nvar initialAuthState = {\n  isLoading: true,\n  isAuthenticated: false\n};\n\n// src/reducer.ts\nvar reducer = (state, action) => {\n  switch (action.type) {\n    case \"INITIALISED\":\n    case \"USER_LOADED\":\n      return {\n        ...state,\n        user: action.user,\n        isLoading: false,\n        isAuthenticated: action.user ? !action.user.expired : false,\n        error: void 0\n      };\n    case \"USER_SIGNED_OUT\":\n    case \"USER_UNLOADED\":\n      return {\n        ...state,\n        user: void 0,\n        isAuthenticated: false\n      };\n    case \"NAVIGATOR_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        activeNavigator: action.method\n      };\n    case \"NAVIGATOR_CLOSE\":\n      return {\n        ...state,\n        isLoading: false,\n        activeNavigator: void 0\n      };\n    case \"ERROR\":\n      return {\n        ...state,\n        isLoading: false,\n        error: action.error\n      };\n    default:\n      return {\n        ...state,\n        isLoading: false,\n        error: new Error(`unknown type ${action[\"type\"]}`)\n      };\n  }\n};\n\n// src/utils.ts\nvar hasAuthParams = (location = window.location) => {\n  let searchParams = new URLSearchParams(location.search);\n  if ((searchParams.get(\"code\") || searchParams.get(\"error\")) && searchParams.get(\"state\")) {\n    return true;\n  }\n  searchParams = new URLSearchParams(location.hash.replace(\"#\", \"?\"));\n  if ((searchParams.get(\"code\") || searchParams.get(\"error\")) && searchParams.get(\"state\")) {\n    return true;\n  }\n  return false;\n};\nvar normalizeErrorFn = fallbackMessage => error => {\n  if (error instanceof Error) {\n    return error;\n  }\n  return new Error(fallbackMessage);\n};\nvar signinError = normalizeErrorFn(\"Sign-in failed\");\nvar signoutError = normalizeErrorFn(\"Sign-out failed\");\n\n// src/AuthProvider.tsx\nvar userManagerContextKeys = [\"clearStaleState\", \"querySessionStatus\", \"revokeTokens\", \"startSilentRenew\", \"stopSilentRenew\"];\nvar navigatorKeys = [\"signinPopup\", \"signinSilent\", \"signinRedirect\", \"signinResourceOwnerCredentials\", \"signoutPopup\", \"signoutRedirect\", \"signoutSilent\"];\nvar unsupportedEnvironment = fnName => () => {\n  throw new Error(`UserManager#${fnName} was called from an unsupported context. If this is a server-rendered page, defer this call with useEffect() or pass a custom UserManager implementation.`);\n};\nvar UserManagerImpl = typeof window === \"undefined\" ? null : UserManager;\nvar AuthProvider = props => {\n  const {\n    children,\n    onSigninCallback,\n    skipSigninCallback,\n    matchSignoutCallback,\n    onSignoutCallback,\n    onRemoveUser,\n    userManager: userManagerProp = null,\n    ...userManagerSettings\n  } = props;\n  const [userManager] = React2.useState(() => {\n    return userManagerProp != null ? userManagerProp : UserManagerImpl ? new UserManagerImpl(userManagerSettings) : {\n      settings: userManagerSettings\n    };\n  });\n  const [state, dispatch] = React2.useReducer(reducer, initialAuthState);\n  const userManagerContext = React2.useMemo(() => Object.assign({\n    settings: userManager.settings,\n    events: userManager.events\n  }, Object.fromEntries(userManagerContextKeys.map(key => {\n    var _a, _b;\n    return [key, (_b = (_a = userManager[key]) == null ? void 0 : _a.bind(userManager)) != null ? _b : unsupportedEnvironment(key)];\n  })), Object.fromEntries(navigatorKeys.map(key => [key, userManager[key] ? async args => {\n    dispatch({\n      type: \"NAVIGATOR_INIT\",\n      method: key\n    });\n    try {\n      return await userManager[key](args);\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        error\n      });\n      return null;\n    } finally {\n      dispatch({\n        type: \"NAVIGATOR_CLOSE\"\n      });\n    }\n  } : unsupportedEnvironment(key)]))), [userManager]);\n  const didInitialize = React2.useRef(false);\n  React2.useEffect(() => {\n    if (!userManager || didInitialize.current) {\n      return;\n    }\n    didInitialize.current = true;\n    void (async () => {\n      try {\n        let user = null;\n        if (hasAuthParams() && !skipSigninCallback) {\n          user = await userManager.signinCallback();\n          onSigninCallback && (await onSigninCallback(user));\n        }\n        user = !user ? await userManager.getUser() : user;\n        dispatch({\n          type: \"INITIALISED\",\n          user\n        });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          error: signinError(error)\n        });\n      }\n      try {\n        if (matchSignoutCallback && matchSignoutCallback(userManager.settings)) {\n          const resp = await userManager.signoutCallback();\n          onSignoutCallback && (await onSignoutCallback(resp));\n        }\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          error: signoutError(error)\n        });\n      }\n    })();\n  }, [userManager, skipSigninCallback, onSigninCallback, onSignoutCallback, matchSignoutCallback]);\n  React2.useEffect(() => {\n    if (!userManager) return void 0;\n    const handleUserLoaded = user => {\n      dispatch({\n        type: \"USER_LOADED\",\n        user\n      });\n    };\n    userManager.events.addUserLoaded(handleUserLoaded);\n    const handleUserUnloaded = () => {\n      dispatch({\n        type: \"USER_UNLOADED\"\n      });\n    };\n    userManager.events.addUserUnloaded(handleUserUnloaded);\n    const handleUserSignedOut = () => {\n      dispatch({\n        type: \"USER_SIGNED_OUT\"\n      });\n    };\n    userManager.events.addUserSignedOut(handleUserSignedOut);\n    const handleSilentRenewError = error => {\n      dispatch({\n        type: \"ERROR\",\n        error\n      });\n    };\n    userManager.events.addSilentRenewError(handleSilentRenewError);\n    return () => {\n      userManager.events.removeUserLoaded(handleUserLoaded);\n      userManager.events.removeUserUnloaded(handleUserUnloaded);\n      userManager.events.removeUserSignedOut(handleUserSignedOut);\n      userManager.events.removeSilentRenewError(handleSilentRenewError);\n    };\n  }, [userManager]);\n  const removeUser = React2.useCallback(async () => {\n    if (!userManager) unsupportedEnvironment(\"removeUser\");\n    await userManager.removeUser();\n    onRemoveUser && (await onRemoveUser());\n  }, [userManager, onRemoveUser]);\n  const contextValue = React2.useMemo(() => {\n    return {\n      ...state,\n      ...userManagerContext,\n      removeUser\n    };\n  }, [state, userManagerContext, removeUser]);\n  return /* @__PURE__ */React2.createElement(AuthContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\n// src/useAuth.ts\nimport React3 from \"react\";\nvar useAuth = () => {\n  const context = React3.useContext(AuthContext);\n  if (!context) {\n    console.warn(\"AuthProvider context is undefined, please verify you are calling useAuth() as child of a <AuthProvider> component.\");\n  }\n  return context;\n};\n\n// src/withAuth.tsx\nimport React4 from \"react\";\nfunction withAuth(Component) {\n  const displayName = `withAuth(${Component.displayName || Component.name})`;\n  const C = props => {\n    const auth = useAuth();\n    return /* @__PURE__ */React4.createElement(Component, {\n      ...props,\n      auth\n    });\n  };\n  C.displayName = displayName;\n  return C;\n}\n\n// src/withAuthenticationRequired.tsx\nimport React5 from \"react\";\nvar withAuthenticationRequired = (Component, options = {}) => {\n  const {\n    OnRedirecting = () => /* @__PURE__ */React5.createElement(React5.Fragment, null),\n    onBeforeSignin,\n    signinRedirectArgs\n  } = options;\n  const displayName = `withAuthenticationRequired(${Component.displayName || Component.name})`;\n  const C = props => {\n    const auth = useAuth();\n    React5.useEffect(() => {\n      if (hasAuthParams() || auth.isLoading || auth.activeNavigator || auth.isAuthenticated) {\n        return;\n      }\n      void (async () => {\n        onBeforeSignin && (await onBeforeSignin());\n        await auth.signinRedirect(signinRedirectArgs);\n      })();\n    }, [auth.isLoading, auth.isAuthenticated, auth]);\n    return auth.isAuthenticated ? /* @__PURE__ */React5.createElement(Component, {\n      ...props\n    }) : OnRedirecting();\n  };\n  C.displayName = displayName;\n  return C;\n};\nexport { AuthContext, AuthProvider, hasAuthParams, useAuth, withAuth, withAuthenticationRequired };","map":{"version":3,"names":["React","AuthContext","createContext","displayName","React2","UserManager","initialAuthState","isLoading","isAuthenticated","reducer","state","action","type","user","expired","error","activeNavigator","method","Error","hasAuthParams","location","window","searchParams","URLSearchParams","search","get","hash","replace","normalizeErrorFn","fallbackMessage","signinError","signoutError","userManagerContextKeys","navigatorKeys","unsupportedEnvironment","fnName","UserManagerImpl","AuthProvider","props","children","onSigninCallback","skipSigninCallback","matchSignoutCallback","onSignoutCallback","onRemoveUser","userManager","userManagerProp","userManagerSettings","useState","settings","dispatch","useReducer","userManagerContext","useMemo","Object","assign","events","fromEntries","map","key","_a","_b","bind","args","didInitialize","useRef","useEffect","current","signinCallback","getUser","resp","signoutCallback","handleUserLoaded","addUserLoaded","handleUserUnloaded","addUserUnloaded","handleUserSignedOut","addUserSignedOut","handleSilentRenewError","addSilentRenewError","removeUserLoaded","removeUserUnloaded","removeUserSignedOut","removeSilentRenewError","removeUser","useCallback","contextValue","createElement","Provider","value","React3","useAuth","context","useContext","console","warn","React4","withAuth","Component","name","C","auth","React5","withAuthenticationRequired","options","OnRedirecting","Fragment","onBeforeSignin","signinRedirectArgs","signinRedirect"],"sources":["/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/AuthContext.ts","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/AuthProvider.tsx","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/AuthState.ts","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/reducer.ts","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/utils.ts","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/useAuth.ts","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/withAuth.tsx","/home/user/Task-Manager-Frontend/node_modules/react-oidc-context/src/withAuthenticationRequired.tsx"],"sourcesContent":["import React from \"react\";\nimport type {\n    UserManagerSettings, UserManagerEvents, User, SessionStatus,\n    SigninPopupArgs, SigninSilentArgs, SigninRedirectArgs,\n    SignoutRedirectArgs, SignoutPopupArgs, QuerySessionStatusArgs,\n    RevokeTokensTypes, SignoutSilentArgs, SigninResourceOwnerCredentialsArgs,\n} from \"oidc-client-ts\";\n\nimport type { AuthState } from \"./AuthState\";\n\n/**\n * @public\n */\nexport interface AuthContextProps extends AuthState {\n    /**\n     * UserManager functions. See [UserManager](https://github.com/authts/oidc-client-ts) for more details.\n     */\n    readonly settings: UserManagerSettings;\n    readonly events: UserManagerEvents;\n    clearStaleState(): Promise<void>;\n    removeUser(): Promise<void>;\n    signinPopup(args?: SigninPopupArgs): Promise<User>;\n    signinSilent(args?: SigninSilentArgs): Promise<User | null>;\n    signinRedirect(args?: SigninRedirectArgs): Promise<void>;\n    signinResourceOwnerCredentials(args: SigninResourceOwnerCredentialsArgs): Promise<User>;\n    signoutRedirect(args?: SignoutRedirectArgs): Promise<void>;\n    signoutPopup(args?: SignoutPopupArgs): Promise<void>;\n    signoutSilent(args?: SignoutSilentArgs): Promise<void>;\n    querySessionStatus(args?: QuerySessionStatusArgs): Promise<SessionStatus | null>;\n    revokeTokens(types?: RevokeTokensTypes): Promise<void>;\n    startSilentRenew(): void;\n    stopSilentRenew(): void;\n}\n\n/**\n * @public\n */\nexport const AuthContext = React.createContext<AuthContextProps | undefined>(undefined);\nAuthContext.displayName = \"AuthContext\";\n","import React from \"react\";\nimport { UserManager, type UserManagerSettings, User } from \"oidc-client-ts\";\nimport type {\n    ProcessResourceOwnerPasswordCredentialsArgs,\n    SignoutResponse,\n} from \"oidc-client-ts\";\n\nimport { AuthContext } from \"./AuthContext\";\nimport { initialAuthState } from \"./AuthState\";\nimport { reducer } from \"./reducer\";\nimport { hasAuthParams, signinError, signoutError } from \"./utils\";\n\n/**\n * @public\n */\nexport interface AuthProviderBaseProps {\n    /**\n     * The child nodes your Provider has wrapped\n     */\n    children?: React.ReactNode;\n\n    /**\n     * On sign in callback hook. Can be a async function.\n     * Here you can remove the code and state parameters from the url when you are redirected from the authorize page.\n     *\n     * ```jsx\n     * const onSigninCallback = (_user: User | undefined): void => {\n     *     window.history.replaceState(\n     *         {},\n     *         document.title,\n     *         window.location.pathname\n     *     )\n     * }\n     * ```\n     */\n    onSigninCallback?: (user: User | undefined) => Promise<void> | void;\n\n    /**\n     * By default, if the page url has code/state params, this provider will call automatically the `userManager.signinCallback`.\n     * In some cases the code might be for something else (another OAuth SDK perhaps). In these\n     * instances you can instruct the client to ignore them.\n     *\n     * ```jsx\n     * <AuthProvider\n     *   skipSigninCallback={window.location.pathname === \"/stripe-oauth-callback\"}\n     * >\n     * ```\n     */\n    skipSigninCallback?: boolean;\n\n    /**\n      * Match the redirect uri used for logout (e.g. `post_logout_redirect_uri`)\n      * This provider will then call automatically the `userManager.signoutCallback`.\n      *\n      * HINT:\n      * Do not call `userManager.signoutRedirect()` within a `React.useEffect`, otherwise the\n      * logout might be unsuccessful.\n      *\n      * ```jsx\n      * <AuthProvider\n      *   matchSignoutCallback={(args) => {\n      *     window &&\n      *     (window.location.href === args.post_logout_redirect_uri);\n      *   }}\n      * ```\n      */\n    matchSignoutCallback?: (args: UserManagerSettings) => boolean;\n\n    /**\n     * On sign out callback hook. Can be a async function.\n     * Here you can change the url after the user is signed out.\n     * When using this, specifying `matchSignoutCallback` is required.\n     *\n     * ```jsx\n     * const onSignoutCallback = (resp: SignoutResponse | undefined): void => {\n     *     // go to home after logout\n     *     window.location.pathname = \"\"\n     * }\n     * ```\n     */\n    onSignoutCallback?: (resp: SignoutResponse | undefined) => Promise<void> | void;\n\n    /**\n     * On remove user hook. Can be a async function.\n     * Here you can change the url after the user is removed.\n     *\n     * ```jsx\n     * const onRemoveUser = (): void => {\n     *     // go to home after logout\n     *     window.location.pathname = \"\"\n     * }\n     * ```\n     */\n    onRemoveUser?: () => Promise<void> | void;\n}\n\n/**\n * This interface (default) is used to pass `UserManagerSettings` together with `AuthProvider` properties to the provider.\n *\n * @public\n */\nexport interface AuthProviderNoUserManagerProps extends AuthProviderBaseProps, UserManagerSettings {\n    /**\n     * Prevent this property.\n     */\n    userManager?: never;\n}\n\n/**\n * This interface is used to pass directly a `UserManager` instance together with `AuthProvider` properties to the provider.\n *\n * @public\n */\nexport interface AuthProviderUserManagerProps extends AuthProviderBaseProps {\n    /**\n     * Allow passing a custom UserManager instance.\n     */\n    userManager?: UserManager;\n}\n\n/**\n * @public\n */\nexport type AuthProviderProps = AuthProviderNoUserManagerProps | AuthProviderUserManagerProps;\n\nconst userManagerContextKeys = [\n    \"clearStaleState\",\n    \"querySessionStatus\",\n    \"revokeTokens\",\n    \"startSilentRenew\",\n    \"stopSilentRenew\",\n] as const;\nconst navigatorKeys = [\n    \"signinPopup\",\n    \"signinSilent\",\n    \"signinRedirect\",\n    \"signinResourceOwnerCredentials\",\n    \"signoutPopup\",\n    \"signoutRedirect\",\n    \"signoutSilent\",\n] as const;\nconst unsupportedEnvironment = (fnName: string) => () => {\n    throw new Error(\n        `UserManager#${fnName} was called from an unsupported context. If this is a server-rendered page, defer this call with useEffect() or pass a custom UserManager implementation.`,\n    );\n};\nconst UserManagerImpl =\n    typeof window === \"undefined\" ? null : UserManager;\n\n/**\n * Provides the AuthContext to its child components.\n *\n * @public\n */\nexport const AuthProvider = (props: AuthProviderProps): JSX.Element => {\n    const {\n        children,\n\n        onSigninCallback,\n        skipSigninCallback,\n\n        matchSignoutCallback,\n        onSignoutCallback,\n\n        onRemoveUser,\n\n        userManager: userManagerProp = null,\n        ...userManagerSettings\n    } = props;\n\n    const [userManager] = React.useState(() => {\n        return userManagerProp ??\n            (UserManagerImpl\n                ? new UserManagerImpl(userManagerSettings as UserManagerSettings)\n                : ({ settings: userManagerSettings } as UserManager));\n    });\n\n    const [state, dispatch] = React.useReducer(reducer, initialAuthState);\n    const userManagerContext = React.useMemo(\n        () =>\n            Object.assign(\n                {\n                    settings: userManager.settings,\n                    events: userManager.events,\n                },\n                Object.fromEntries(\n                    userManagerContextKeys.map((key) => [\n                        key,\n                        userManager[key]?.bind(userManager) ??\n                            unsupportedEnvironment(key),\n                    ]),\n                ) as Pick<UserManager, typeof userManagerContextKeys[number]>,\n                Object.fromEntries(\n                    navigatorKeys.map((key) => [\n                        key,\n                        userManager[key]\n                            ? async (args: ProcessResourceOwnerPasswordCredentialsArgs & never[]) => {\n                                dispatch({\n                                    type: \"NAVIGATOR_INIT\",\n                                    method: key,\n                                });\n                                try {\n                                    return await userManager[key](args);\n                                } catch (error) {\n                                    dispatch({ type: \"ERROR\", error: error as Error });\n                                    return null;\n                                } finally {\n                                    dispatch({ type: \"NAVIGATOR_CLOSE\" });\n                                }\n                            }\n                            : unsupportedEnvironment(key),\n                    ]),\n                ) as Pick<UserManager, typeof navigatorKeys[number]>,\n            ),\n        [userManager],\n    );\n    const didInitialize = React.useRef(false);\n\n    React.useEffect(() => {\n        if (!userManager || didInitialize.current) {\n            return;\n        }\n        didInitialize.current = true;\n\n        void (async (): Promise<void> => {\n            // sign-in\n            try {\n                let user: User | undefined | null = null;\n\n                // check if returning back from authority server\n                if (hasAuthParams() && !skipSigninCallback) {\n                    user = await userManager.signinCallback();\n                    onSigninCallback && await onSigninCallback(user);\n                }\n                user = !user ? await userManager.getUser() : user;\n                dispatch({ type: \"INITIALISED\", user });\n            } catch (error) {\n                dispatch({ type: \"ERROR\", error: signinError(error) });\n            }\n\n            // sign-out\n            try {\n                if (matchSignoutCallback && matchSignoutCallback(userManager.settings)) {\n                    const resp = await userManager.signoutCallback();\n                    onSignoutCallback && await onSignoutCallback(resp);\n                }\n            } catch (error) {\n                dispatch({ type: \"ERROR\", error: signoutError(error) });\n            }\n        })();\n    }, [userManager, skipSigninCallback, onSigninCallback, onSignoutCallback, matchSignoutCallback]);\n\n    // register to userManager events\n    React.useEffect(() => {\n        if (!userManager) return undefined;\n        // event UserLoaded (e.g. initial load, silent renew success)\n        const handleUserLoaded = (user: User) => {\n            dispatch({ type: \"USER_LOADED\", user });\n        };\n        userManager.events.addUserLoaded(handleUserLoaded);\n\n        // event UserUnloaded (e.g. userManager.removeUser)\n        const handleUserUnloaded = () => {\n            dispatch({ type: \"USER_UNLOADED\" });\n        };\n        userManager.events.addUserUnloaded(handleUserUnloaded);\n\n        // event UserSignedOut (e.g. user was signed out in background (checkSessionIFrame option))\n        const handleUserSignedOut = () => {\n            dispatch({ type: \"USER_SIGNED_OUT\" });\n        };\n        userManager.events.addUserSignedOut(handleUserSignedOut);\n\n        // event SilentRenewError (silent renew error)\n        const handleSilentRenewError = (error: Error) => {\n            dispatch({ type: \"ERROR\", error });\n        };\n        userManager.events.addSilentRenewError(handleSilentRenewError);\n\n        return () => {\n            userManager.events.removeUserLoaded(handleUserLoaded);\n            userManager.events.removeUserUnloaded(handleUserUnloaded);\n            userManager.events.removeUserSignedOut(handleUserSignedOut);\n            userManager.events.removeSilentRenewError(handleSilentRenewError);\n        };\n    }, [userManager]);\n\n    const removeUser = React.useCallback(async () => {\n        if (!userManager) unsupportedEnvironment(\"removeUser\");\n        await userManager.removeUser();\n        onRemoveUser && await onRemoveUser();\n    }, [userManager, onRemoveUser]);\n\n    const contextValue = React.useMemo(() => {\n        return {\n            ...state,\n            ...userManagerContext,\n            removeUser,\n        };\n    }, [state, userManagerContext, removeUser]);\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n","import type { User } from \"oidc-client-ts\";\n\n/**\n * The auth state which, when combined with the auth methods, make up the return object of the `useAuth` hook.\n *\n * @public\n */\nexport interface AuthState {\n    /**\n     * See [User](https://authts.github.io/oidc-client-ts/classes/User.html) for more details.\n     */\n    user?: User | null;\n\n    /**\n     * True when the library has been initialized and no navigator request is in progress.\n     */\n    isLoading: boolean;\n\n    /**\n     * True while the user has a valid access token.\n     */\n    isAuthenticated: boolean;\n\n    /**\n     * Tracks the status of most recent signin/signout request method.\n     */\n    activeNavigator?: \"signinRedirect\" | \"signinResourceOwnerCredentials\" | \"signinPopup\" | \"signinSilent\" | \"signoutRedirect\" | \"signoutPopup\" | \"signoutSilent\";\n\n    /**\n     * Was there a signin or silent renew error?\n     */\n    error?: Error;\n}\n\n/**\n * The initial auth state.\n */\nexport const initialAuthState: AuthState = {\n    isLoading: true,\n    isAuthenticated: false,\n};\n","import type { User } from \"oidc-client-ts\";\n\nimport type { AuthState } from \"./AuthState\";\n\ntype Action =\n    | { type: \"INITIALISED\" | \"USER_LOADED\"; user: User | null }\n    | { type: \"USER_UNLOADED\" }\n    | { type: \"USER_SIGNED_OUT\" }\n    | { type: \"NAVIGATOR_INIT\"; method: NonNullable<AuthState[\"activeNavigator\"]> }\n    | { type: \"NAVIGATOR_CLOSE\" }\n    | { type: \"ERROR\"; error: Error };\n\n/**\n * Handles how that state changes in the `useAuth` hook.\n */\nexport const reducer = (state: AuthState, action: Action): AuthState => {\n    switch (action.type) {\n        case \"INITIALISED\":\n        case \"USER_LOADED\":\n            return {\n                ...state,\n                user: action.user,\n                isLoading: false,\n                isAuthenticated: action.user ? !action.user.expired : false,\n                error: undefined,\n            };\n        case \"USER_SIGNED_OUT\":\n        case \"USER_UNLOADED\":\n            return {\n                ...state,\n                user: undefined,\n                isAuthenticated: false,\n            };\n        case \"NAVIGATOR_INIT\":\n            return {\n                ...state,\n                isLoading: true,\n                activeNavigator: action.method,\n            };\n        case \"NAVIGATOR_CLOSE\":\n            // we intentionally don't handle cases where multiple concurrent navigators are open\n            return {\n                ...state,\n                isLoading: false,\n                activeNavigator: undefined,\n            };\n        case \"ERROR\":\n            return {\n                ...state,\n                isLoading: false,\n                error: action.error,\n            };\n        default:\n            return {\n                ...state,\n                isLoading: false,\n                error: new Error(`unknown type ${action[\"type\"] as string}`),\n            };\n    }\n};\n","/**\n * @public\n */\nexport const hasAuthParams = (location = window.location): boolean => {\n    // response_mode: query\n    let searchParams = new URLSearchParams(location.search);\n    if ((searchParams.get(\"code\") || searchParams.get(\"error\")) &&\n        searchParams.get(\"state\")) {\n        return true;\n    }\n\n    // response_mode: fragment\n    searchParams = new URLSearchParams(location.hash.replace(\"#\", \"?\"));\n    if ((searchParams.get(\"code\") || searchParams.get(\"error\")) &&\n        searchParams.get(\"state\")) {\n        return true;\n    }\n\n    return false;\n};\n\nconst normalizeErrorFn = (fallbackMessage: string) => (error: unknown): Error => {\n    if (error instanceof Error) {\n        return error;\n    }\n    return new Error(fallbackMessage);\n};\n\nexport const signinError = normalizeErrorFn(\"Sign-in failed\");\nexport const signoutError = normalizeErrorFn(\"Sign-out failed\");\n","import React from \"react\";\n\nimport { AuthContext, type AuthContextProps } from \"./AuthContext\";\n\n/**\n * @public\n */\nexport const useAuth = (): AuthContextProps => {\n    const context = React.useContext(AuthContext);\n\n    if (!context) {\n        console.warn(\"AuthProvider context is undefined, please verify you are calling useAuth() as child of a <AuthProvider> component.\");\n    }\n\n    return context as AuthContextProps;\n};\n","import React from \"react\";\n\nimport type { AuthContextProps } from \"./AuthContext\";\nimport { useAuth } from \"./useAuth\";\n\n/**\n * A public higher-order component to access the imperative API\n * @public\n */\nexport function withAuth<P>(\n    Component: React.ComponentType<P>,\n): React.ComponentType<Omit<P, keyof AuthContextProps>> {\n    const displayName = `withAuth(${Component.displayName || Component.name})`;\n    const C: React.FC<Omit<P, keyof AuthContextProps>> = (props) => {\n        const auth = useAuth();\n\n        return <Component {...(props as P)} auth={auth} />;\n    };\n\n    C.displayName = displayName;\n\n    return C;\n}\n","import React from \"react\";\nimport type { SigninRedirectArgs } from \"oidc-client-ts\";\n\nimport { useAuth } from \"./useAuth\";\nimport { hasAuthParams } from \"./utils\";\n\n/**\n * @public\n */\nexport interface WithAuthenticationRequiredProps {\n    /**\n     * Show a message when redirected to the signin page.\n     */\n    OnRedirecting?: () => JSX.Element;\n\n    /**\n     * Allows executing logic before the user is redirected to the signin page.\n     */\n    onBeforeSignin?: () => Promise<void> | void;\n\n    /**\n     * Pass additional signin redirect arguments.\n     */\n    signinRedirectArgs?: SigninRedirectArgs;\n}\n\n/**\n * A public higher-order component to protect accessing not public content. When you wrap your components in this higher-order\n * component and an anonymous user visits your component, they will be redirected to the login page; after logging in, they\n * will return to the page from which they were redirected.\n *\n * @public\n */\nexport const withAuthenticationRequired = <P extends object>(\n    Component: React.ComponentType<P>,\n    options: WithAuthenticationRequiredProps = {},\n): React.FC<P> => {\n    const { OnRedirecting = (): JSX.Element => <></>, onBeforeSignin, signinRedirectArgs } = options;\n    const displayName = `withAuthenticationRequired(${Component.displayName || Component.name})`;\n    const C: React.FC<P> = (props) => {\n        const auth = useAuth();\n\n        React.useEffect(() => {\n            if (hasAuthParams() ||\n                auth.isLoading || auth.activeNavigator || auth.isAuthenticated) {\n                return;\n            }\n            void (async (): Promise<void> => {\n                onBeforeSignin && await onBeforeSignin();\n                await auth.signinRedirect(signinRedirectArgs);\n            })();\n        }, [auth.isLoading, auth.isAuthenticated, auth]);\n\n        return auth.isAuthenticated ? <Component {...props} /> : OnRedirecting();\n    };\n\n    C.displayName = displayName;\n\n    return C;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}